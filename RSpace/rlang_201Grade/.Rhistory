print(m)
m <- matrix(c(0:0),nrow=5,byrow=TRUE)
m <- matrix(c(0:0),nrow=5,byrow=TRUE)
print(m)
cnt<-0
m <- matrix(c(1:25),nrow=5,byrow=TRUE)
print(m)
cnt<-0
m <- matrix(c(0:0),nrow=5,ncol=5,byrow=TRUE)
print(m)
for (i in 1:5){
for(k in 1:5){
cnt=cnt+1
m[i,k] <-cnt
}
}
print(m)
cnt<-0
m <- matrix(c(0:0),nrow=5,ncol=5,byrow=TRUE)
print(m)
for (i in 1:5){
for(k in 5:1){
cnt=cnt+1
m[i,k] <-cnt
}
}
print(m)
cnt<-0
m <- matrix(c(0:0),nrow=5,ncol=5,byrow=TRUE)
print(m)
for (i in 1:5){
if(i%%2==0){
for(k in 1:5){
cnt=cnt+1
m[i,k] <-cnt
}
}else{
for(k in 5:1){
cnt=cnt+1
m[i,k]<-cnt
}
}
}
print(m)
cnt<-0
m <- matrix(c(0:0),nrow=5,ncol=5,byrow=TRUE)
print(m)
for (i in 1:5){
if(i%%2==0){
for(k in 5:1){
cnt=cnt+1
m[i,k]<-cnt
}
}else{
for(k in 1:5){
cnt=cnt+1
m[i,k] <-cnt
}
}
}
print(m)
source('C:/Users/1027/JavaWorkspace/RSpace/rlang_201Grade/rlang_matrix.R')
cnt<-0
m <- matrix(c(0:0),nrow=5,ncol=5,byrow=TRUE)
print(m)
for (i in 1:5){
if(i%%2==0){
for(k in 5:1){
cnt=cnt+1
m[i,k]<-cnt
}
}else{
for(k in 1:5){
cnt=cnt+1
m[i,k] <-cnt
}
}
}
print(m)
grade <- function(nam, kor, eng, math){
return(list(nam,
sum(kor,eng,math),
round(sum(kor,eng,math)/3,2),
switch(
toString(sum(kor,eng,math)/3/10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
grade <- function(name, kor, eng, math){
return(list(name=name,
sum=sum(kor,eng,math),
avg=round(sum(kor,eng,math)/3,2),
switch(
toString(round(avg/10)),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
class(res$name)
class(res$name)
class(res$sum)
class(res$name)
class(res$sum)
class(res$avg)
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
return(list(name=name,
sum=sum(res),
mean=round(mean(res)%/%3,2),
switch(
toString(round(avg/10)),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
grade <- function(name, kor, eng, math){
res<-c(kor,eng,math)
return(list(name=name,
sum=sum(res),
mean=round(mean(res)%/%3,2),
switch(
toString(round(avg/10)),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
kim <- grade("김길동",60,60,60)
res<-c(kor,eng,math)
res<-c(kor,eng,math)
kim <- grade("김길동",60,60,60)
grade <- function(name, kor, eng, math){
res<-c(kor,eng,math)
return(list(name=name,
sum=sum(res),
mean=round(mean(res)%/%3,2),
switch(
toString(round(mean/10)),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
kim <- grade("김길동",60,60,60)
kim <- grade("김길동",60,60,60)
return(list(name=name,
sum=sum(res),
mean=round(mean(res)%/%3,2),
switch(
toString(round(mean/10)),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
grade <- function(name, kor, eng, math){
res<-c(kor,eng,math)
return(list(name=name,
sum=sum(res),
mean=round(mean(res)%/%3,2),
switch(
toString(mean/10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
kim <- grade("김길동",60,60,60)
grade <- function(name, kor, eng, math){
res<-c(kor,eng,math)
return(list(name=name,
sum=sum(res),
mean=round(mean(res)%/%3,2),
switch(
toString(mean(res)/10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
kim <- grade("김길동",60,60,60)
grade <- function(name, kor, eng, math){
res<-c(kor,eng,math)
return(list(name=name,
sum=sum(res),
mean=round(mean(res),2),
switch(
toString(mean(res)/10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
grade <- function(name, kor, eng, math){
res<-c(kor,eng,math)
return(list(name=name,
sum=sum(res),
mean=round(mean(res),2),
switch(
toString(mean(res)%/%10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
kim <- grade("김길동",60,60,60)
class(kim$name)
class(kim$sum)
class(kim$avg)
class(kim$name)
class(kim$sum)
class(kim$mean)
print(class)
class(kim$name)
class(kim$sum)
class(kim$mean)
print(class)
class(kim$name)
class(kim$sum)
class(kim$mean)
print(kim)
class(kim$name)
class(kim$sum)
class(kim$mean)
class(kim$grade)
print(kim)
grade <- function(name, kor, eng, math){
res<-c(kor,eng,math)
return(list(name=name,
sum=sum(res),
mean=round(mean(res),2),
grade=switch(
toString(mean(res)%/%10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
kim <- grade("김길동",60,60,60)
class(kim$name)
class(kim$sum)
class(kim$mean)
class(kim$grade)
print(kim)
# Print the data frame.
print(emp.data)
stu.data <- data.frame(
stu_id = c (1:5),
stu_name = c(kim$name,rick$name,dan$name,gray$name,ryan$name),
stu_sum = c(kim$sum,rick$sum,dan$sum,gray$sum,ryan$sum),
stu_mean = c(kim$mean,rick$mean,dan$mean,gray$mean,ryan$mean),
stu_grade = c(kim$grade,rick$grade,dan$grade,gray$grade,ryan$grade),
stringsAsFactors = FALSE
)
# Print the data frame.
print(stu.data)
grade <- function(name, kor, eng, math){
res<-c(kor,eng,math)
return(list(name=name,
sum=sum(res),
mean=round(mean(res),2),
grade=switch(
toString(mean(res)%/%10),
"10" = "a",
"9" = "a",
"8" = "b",
"7" = "c",
"6" = "d",
"e")))
}
kim <- grade("김길동",60,60,60)
class(kim$name)
class(kim$sum)
class(kim$mean)
class(kim$grade)
print(kim)
rick <-grade("rick",80,80,80)
class(rick$name)
class(rick$sum)
class(rick$mean)
class(rick$grade)
dan <-grade("dan",90,60,80)
class(dan$name)
class(dan$sum)
class(dan$mean)
class(dan$grade)
gray <-grade("gray",90,60,80)
class(gray$name)
class(gray$sum)
class(gray$mean)
class(gray$grade)
ryan <-grade("ryan",90,60,80)
class(ryan$name)
class(ryan$sum)
class(ryan$mean)
class(ryan$grade)
# Create the data frame.
stu.data <- data.frame(
stu_id = c (1:5),
stu_name = c(kim$name,rick$name,dan$name,gray$name,ryan$name),
stu_sum = c(kim$sum,rick$sum,dan$sum,gray$sum,ryan$sum),
stu_mean = c(kim$mean,rick$mean,dan$mean,gray$mean,ryan$mean),
stu_grade = c(kim$grade,rick$grade,dan$grade,gray$grade,ryan$grade),
stringsAsFactors = FALSE
)
# Print the data frame.
print(stu.data)
class(kim$name)
CLASS(kim$sum)
class(kim$mean)
class(kim$grade)
print(kim)
# Create the data frame.
stu.data <- data.frame(
stu_id = c (1:5),
stu_name = c(kim$name,rick$name,dan$name,gray$name,ryan$name),
stu_sum = c(kim$sum,rick$sum,dan$sum,gray$sum,ryan$sum),
stu_mean = c(kim$mean,rick$mean,dan$mean,gray$mean,ryan$mean),
stu_grade = c(kim$grade,rick$grade,dan$grade,gray$grade,ryan$grade),
stringsAsFactors = FALSE
)
# Print the data frame.
print(stu.data)
# Create the data frame.
stu.data <- data.frame(
no = c (1:5),
stu_name = c(kim$name,rick$name,dan$name,gray$name,ryan$name),
stu_sum = c(kim$sum,rick$sum,dan$sum,gray$sum,ryan$sum),
stu_mean = c(kim$mean,rick$mean,dan$mean,gray$mean,ryan$mean),
stu_grade = c(kim$grade,rick$grade,dan$grade,gray$grade,ryan$grade),
stringsAsFactors = FALSE
)
# Print the data frame.
print(stu.data)
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
pie(x,labels)
barplot(c(7,12,28,3,41))
hist(c(9,13,21,8,36,22,12,41,31,33,19),xlab = "Weight",col = "yellow",border = "blue")
plot(c(7,12,28,3,41),type = "o")
input <- mtcars[,c('wt','mpg')]
print(input)
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
input <- mtcars[,c('mpg','cyl')]
print(head(input))
boxplot(mpg ~ cyl, data = mtcars, xlab = "Number of Cylinders",
ylab = "Miles Per Gallon", main = "Mileage Data")
plot(c(7,12,28,3,41),type = "o")
hist(c(9,13,21,8,36,22,12,41,31,33,19),xlab = "Weight",col = "yellow",border = "blue")
plot(c(7,12,28,3,41),type = "o")
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
pie(x,labels)
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
pie(x,labels)
barplot(c(7,12,28,3,41))
#산포도
input <- mtcars[,c('wt','mpg')]
print(input)
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
x <- c(kim$sum,rick$sum,dan$sum,gray$sum,ryan$sum)
labels <- c("kim", "rick", "dan", "gray","ryan")
pie(x,labels)
barplot(c(7,12,28,3,41))
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"k",
"1253")
rst <- dbGetQuery(conn, "SELECT * FROM TAB")
rst
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"k",
"1253")
rst <- dbGetQuery(conn, "SELECT * FROM TAB")
rst
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"k",
"1253")
rst <- dbGetQuery(conn, "SELECT * FROM TAB")
rst
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"k",
"1253")
rst <- dbGetQuery(conn, "SELECT * FROM TAB")
rst
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"KAN",
"1253")
rst <- dbGetQuery(conn, "SELECT * FROM TAB")
rst
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
View(emp.data)
